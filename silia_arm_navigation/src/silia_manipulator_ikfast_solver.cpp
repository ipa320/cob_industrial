/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 61 generated on 2013-01-18 15:04:08.802018
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==61);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53;
x0=IKcos(j[0]);
x1=IKcos(j[3]);
x2=IKsin(j[0]);
x3=IKsin(j[3]);
x4=IKsin(j[1]);
x5=IKsin(j[2]);
x6=IKcos(j[1]);
x7=IKcos(j[2]);
x8=IKcos(j[5]);
x9=IKcos(j[4]);
x10=IKsin(j[5]);
x11=IKsin(j[4]);
x12=((IkReal(0.670000000000000))*(x0));
x13=((IkReal(1.00000000000000))*(x9));
x14=((IkReal(1.00000000000000))*(x1));
x15=((IkReal(0.158000000000000))*(x1));
x16=((IkReal(1.00000000000000))*(x3));
x17=((IkReal(1.00000000000000))*(x11));
x18=((IkReal(0.158000000000000))*(x0));
x19=((IkReal(0.0350000000000000))*(x0));
x20=((IkReal(0.0350000000000000))*(x5));
x21=((IkReal(1.00000000000000))*(x2));
x22=((IkReal(1.00000000000000))*(x5));
x23=((IkReal(0.670000000000000))*(x5));
x24=((IkReal(1.00000000000000))*(x0));
x25=((x6)*(x7));
x26=((x4)*(x7));
x27=((x1)*(x11));
x28=((x2)*(x6));
x29=((IkReal(-1.00000000000000))*(x9));
x30=((x0)*(x6));
x31=((x2)*(x3));
x32=((IkReal(-1.00000000000000))*(x11));
x33=((x2)*(x4));
x34=((x5)*(x6));
x35=((x4)*(x5));
x36=((x16)*(x2));
x37=((x0)*(x14));
x38=((x22)*(x4));
x39=((x21)*(x35));
x40=((((IkReal(-1.00000000000000))*(x38)))+(x25));
x41=((((IkReal(-1.00000000000000))*(x26)))+(((IkReal(-1.00000000000000))*(x22)*(x6))));
x42=((x1)*(x40));
x43=((x11)*(x41));
x44=((((IkReal(-1.00000000000000))*(x24)*(x25)))+(((x0)*(x38))));
x45=((((IkReal(-1.00000000000000))*(x21)*(x25)))+(x39));
x46=((((IkReal(-1.00000000000000))*(x22)*(x30)))+(((IkReal(-1.00000000000000))*(x24)*(x26))));
x47=((x21)*(((((IkReal(-1.00000000000000))*(x34)))+(((IkReal(-1.00000000000000))*(x26))))));
x48=((x11)*(x44));
x49=((IkReal(1.00000000000000))*(x46));
x50=((x1)*(x46));
x51=((x1)*(x47));
x52=((x3)*(x47));
x53=((((x0)*(x3)))+(x51));
eerot[0]=((((x10)*(((((x9)*(((((IkReal(-1.00000000000000))*(x36)))+(x50)))))+(x48)))))+(((x8)*(((((x1)*(x2)))+(((x3)*(x46))))))));
eerot[1]=((((x8)*(((x48)+(((x9)*(((((IkReal(-1.00000000000000))*(x31)))+(x50)))))))))+(((x10)*(((((IkReal(-1.00000000000000))*(x14)*(x2)))+(((IkReal(-1.00000000000000))*(x16)*(x46))))))));
eerot[2]=((((x11)*(((((IkReal(-1.00000000000000))*(x14)*(x46)))+(x36)))))+(((x44)*(x9))));
IkReal x54=((IkReal(1.00000000000000))*(x35));
IkReal x55=((IkReal(1.00000000000000))*(x19));
eetrans[0]=((((IkReal(-1.00000000000000))*(x34)*(x55)))+(((IkReal(-1.00000000000000))*(x12)*(x54)))+(((x11)*(((((IkReal(-0.158000000000000))*(x31)))+(((x15)*(x46)))))))+(((IkReal(-1.00000000000000))*(x26)*(x55)))+(((x9)*(((((x18)*(x25)))+(((IkReal(-1.00000000000000))*(x18)*(x54)))))))+(((x12)*(x25)))+(((IkReal(0.680000000000000))*(x30)))+(((IkReal(0.260000000000000))*(x0)))+(((IkReal(0.00800000000000000))*(x2))));
eerot[3]=((((x8)*(((x37)+(((IkReal(-1.00000000000000))*(x52)))))))+(((x10)*(((((IkReal(-1.00000000000000))*(x17)*(x45)))+(((IkReal(-1.00000000000000))*(x13)*(x53))))))));
eerot[4]=((((x10)*(((((IkReal(-1.00000000000000))*(x37)))+(x52)))))+(((x8)*(((((x32)*(x45)))+(((x29)*(x53))))))));
eerot[5]=((((x11)*(x53)))+(((x9)*(((((IkReal(-1.00000000000000))*(x39)))+(((x2)*(x25))))))));
IkReal x56=((x2)*(x25));
eetrans[1]=((((IkReal(-0.670000000000000))*(x56)))+(((x11)*(((((IkReal(-1.00000000000000))*(x15)*(x47)))+(((IkReal(-1.00000000000000))*(x18)*(x3)))))))+(((x23)*(x33)))+(((IkReal(-0.260000000000000))*(x2)))+(((IkReal(0.0350000000000000))*(x2)*(x26)))+(((IkReal(-0.680000000000000))*(x28)))+(((IkReal(0.00800000000000000))*(x0)))+(((x9)*(((((IkReal(0.158000000000000))*(x33)*(x5)))+(((IkReal(-0.158000000000000))*(x56)))))))+(((x20)*(x28))));
eerot[6]=((((x3)*(x8)*(((((IkReal(-1.00000000000000))*(x25)))+(x38)))))+(((x10)*(((((IkReal(-1.00000000000000))*(x17)*(x41)))+(((IkReal(-1.00000000000000))*(x13)*(x42))))))));
eerot[7]=((((x10)*(x3)*(x40)))+(((x8)*(((((x29)*(x42)))+(((x32)*(x41))))))));
eerot[8]=((((x27)*(x40)))+(((x9)*(((x34)+(x26))))));
eetrans[2]=((IkReal(1.27500000000000))+(((IkReal(-0.0350000000000000))*(x25)))+(((x27)*(((((IkReal(0.158000000000000))*(x35)))+(((IkReal(-0.158000000000000))*(x25)))))))+(((IkReal(-0.680000000000000))*(x4)))+(((IkReal(-1.00000000000000))*(x23)*(x6)))+(((IkReal(-0.670000000000000))*(x26)))+(((x9)*(((((IkReal(-0.158000000000000))*(x34)))+(((IkReal(-0.158000000000000))*(x26)))))))+(((x20)*(x4))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((((IkReal(0.158000000000000))*(r02)))+(px));
new_r10=((IkReal(-1.00000000000000))*(r10));
new_r11=((IkReal(-1.00000000000000))*(r11));
new_r12=((IkReal(-1.00000000000000))*(r12));
new_py=((((IkReal(-1.00000000000000))*(py)))+(((IkReal(-0.158000000000000))*(r12))));
new_r20=((IkReal(-1.00000000000000))*(r20));
new_r21=((IkReal(-1.00000000000000))*(r21));
new_r22=((IkReal(-1.00000000000000))*(r22));
new_pz=((IkReal(1.27500000000000))+(((IkReal(-0.158000000000000))*(r22)))+(((IkReal(-1.00000000000000))*(pz))));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((IkReal(-1.00000000000000))*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((IkReal(-1.00000000000000))*(pz)*(r00))));
rxp0_2=((((IkReal(-1.00000000000000))*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((IkReal(-1.00000000000000))*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((IkReal(-1.00000000000000))*(pz)*(r01))));
rxp1_2=((((IkReal(-1.00000000000000))*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((IkReal(-1.00000000000000))*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((IkReal(-1.00000000000000))*(pz)*(r02))));
rxp2_2=((((IkReal(-1.00000000000000))*(px)*(r12)))+(((py)*(r02))));
{
IkReal dummyeval[1];
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
if( IKabs(py) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(px))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x57=((IkReal(1.00000000000000))*(IKatan2(py, ((IkReal(-1.00000000000000))*(px)))));
if( ((((px)*(px))+((py)*(py)))) < (IkReal)-0.00001 )
    continue;
if( (((IkReal(0.00800000000000000))*(((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30)))) < -1-IKFAST_SINCOS_THRESH || (((IkReal(0.00800000000000000))*(((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x58=IKasin(((IkReal(0.00800000000000000))*(((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))));
j0array[0]=((((IkReal(-1.00000000000000))*(x57)))+(((IkReal(-1.00000000000000))*(x58))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((IkReal(3.14159265358979))+(x58)+(((IkReal(-1.00000000000000))*(x57))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
if( (((IkReal(0.926073762202177))+(((IkReal(0.569898964773662))*(cj0)*(px)))+(((IkReal(-1.09595954764166))*(pp)))+(((IkReal(0.569898964773662))*(py)*(sj0))))) < -1-IKFAST_SINCOS_THRESH || (((IkReal(0.926073762202177))+(((IkReal(0.569898964773662))*(cj0)*(px)))+(((IkReal(-1.09595954764166))*(pp)))+(((IkReal(0.569898964773662))*(py)*(sj0))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x59=IKasin(((IkReal(0.926073762202177))+(((IkReal(0.569898964773662))*(cj0)*(px)))+(((IkReal(-1.09595954764166))*(pp)))+(((IkReal(0.569898964773662))*(py)*(sj0)))));
j2array[0]=((IkReal(-1.62298769238200))+(((IkReal(-1.00000000000000))*(x59))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((IkReal(1.51860496120779))+(x59));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal dummyeval[1];
IkReal gconst0;
IkReal x60=((IkReal(0.670000000000000))*(sj2));
IkReal x61=((cj0)*(px));
IkReal x62=((py)*(sj0));
IkReal x63=((IkReal(0.0350000000000000))*(cj2));
gconst0=IKsign(((((IkReal(-0.00910000000000000))*(cj2)))+(((IkReal(-0.174200000000000))*(sj2)))+(((x60)*(x61)))+(((x60)*(x62)))+(((IkReal(-0.0350000000000000))*(pz)*(sj2)))+(((x62)*(x63)))+(((x61)*(x63)))+(((IkReal(0.670000000000000))*(cj2)*(pz)))+(((IkReal(0.680000000000000))*(pz)))));
IkReal x64=((cj0)*(px));
IkReal x65=((IkReal(3.84615384615385))*(cj2));
IkReal x66=((IkReal(73.6263736263736))*(sj2));
IkReal x67=((py)*(sj0));
dummyeval[0]=((((IkReal(73.6263736263736))*(cj2)*(pz)))+(((IkReal(74.7252747252747))*(pz)))+(((IkReal(-3.84615384615385))*(pz)*(sj2)))+(((x64)*(x66)))+(((x64)*(x65)))+(((x66)*(x67)))+(((IkReal(-1.00000000000000))*(cj2)))+(((IkReal(-19.1428571428571))*(sj2)))+(((x65)*(x67))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst1;
IkReal x68=((py)*(sj0));
IkReal x69=((cj0)*(px));
gconst1=IKsign(((IkReal(-0.0676000000000000))+(((IkReal(-2.00000000000000))*(x68)*(x69)))+(((IkReal(-1.00000000000000))*((x68)*(x68))))+(((IkReal(-1.00000000000000))*((pz)*(pz))))+(((IkReal(-1.00000000000000))*((x69)*(x69))))+(((IkReal(0.520000000000000))*(x68)))+(((IkReal(0.520000000000000))*(x69)))));
IkReal x70=((py)*(sj0));
IkReal x71=((cj0)*(px));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-14.7928994082840))*((x70)*(x70))))+(((IkReal(-14.7928994082840))*((pz)*(pz))))+(((IkReal(-14.7928994082840))*((x71)*(x71))))+(((IkReal(7.69230769230769))*(x71)))+(((IkReal(7.69230769230769))*(x70)))+(((IkReal(-29.5857988165680))*(x70)*(x71))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x72=((cj0)*(px));
IkReal x73=((IkReal(0.670000000000000))*(sj2));
IkReal x74=((IkReal(0.0350000000000000))*(cj2));
IkReal x75=((py)*(sj0));
IkReal x76=((IkReal(0.670000000000000))*(cj2));
IkReal x77=((IkReal(0.0350000000000000))*(sj2));
IkReal x78=((sj2)*(x75));
if( IKabs(((gconst1)*(((((IkReal(-0.00910000000000000))*(cj2)))+(((IkReal(-0.174200000000000))*(sj2)))+(((pz)*(x77)))+(((IkReal(-0.680000000000000))*(pz)))+(((x72)*(x73)))+(((x72)*(x74)))+(((x73)*(x75)))+(((IkReal(-1.00000000000000))*(pz)*(x76)))+(((x74)*(x75))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((IkReal(0.176800000000000))+(((IkReal(0.174200000000000))*(cj2)))+(((x75)*(x77)))+(((IkReal(-0.680000000000000))*(x75)))+(((IkReal(-0.680000000000000))*(x72)))+(((IkReal(-1.00000000000000))*(x72)*(x76)))+(((x72)*(x77)))+(((IkReal(-0.00910000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(pz)*(x74)))+(((IkReal(-1.00000000000000))*(pz)*(x73)))+(((IkReal(-1.00000000000000))*(x75)*(x76))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst1)*(((((IkReal(-0.00910000000000000))*(cj2)))+(((IkReal(-0.174200000000000))*(sj2)))+(((pz)*(x77)))+(((IkReal(-0.680000000000000))*(pz)))+(((x72)*(x73)))+(((x72)*(x74)))+(((x73)*(x75)))+(((IkReal(-1.00000000000000))*(pz)*(x76)))+(((x74)*(x75)))))), ((gconst1)*(((IkReal(0.176800000000000))+(((IkReal(0.174200000000000))*(cj2)))+(((x75)*(x77)))+(((IkReal(-0.680000000000000))*(x75)))+(((IkReal(-0.680000000000000))*(x72)))+(((IkReal(-1.00000000000000))*(x72)*(x76)))+(((x72)*(x77)))+(((IkReal(-0.00910000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(pz)*(x74)))+(((IkReal(-1.00000000000000))*(pz)*(x73)))+(((IkReal(-1.00000000000000))*(x75)*(x76)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x79=IKsin(j1);
IkReal x80=IKcos(j1);
IkReal x81=((cj0)*(px));
IkReal x82=((IkReal(0.0350000000000000))*(sj2));
IkReal x83=((py)*(sj0));
IkReal x84=((IkReal(0.670000000000000))*(sj2));
IkReal x85=((IkReal(0.0350000000000000))*(cj2));
IkReal x86=((IkReal(0.670000000000000))*(cj2));
IkReal x87=((IkReal(1.00000000000000))*(x80));
IkReal x88=((pz)*(x79));
IkReal x89=((IkReal(0.670000000000000))*(x80));
IkReal x90=((IkReal(1.36000000000000))*(x80));
evalcond[0]=((((x79)*(x81)))+(((x79)*(x83)))+(x84)+(x85)+(((IkReal(-0.260000000000000))*(x79)))+(((IkReal(-1.00000000000000))*(pz)*(x87))));
evalcond[1]=((IkReal(0.680000000000000))+(((IkReal(-1.00000000000000))*(x81)*(x87)))+(((IkReal(0.260000000000000))*(x80)))+(((IkReal(-1.00000000000000))*(x83)*(x87)))+(x86)+(((IkReal(-1.00000000000000))*(x88)))+(((IkReal(-1.00000000000000))*(x82))));
evalcond[2]=((((x79)*(x86)))+(((IkReal(0.680000000000000))*(x79)))+(((IkReal(-1.00000000000000))*(x79)*(x82)))+(((IkReal(-1.00000000000000))*(pz)))+(((x80)*(x84)))+(((x80)*(x85))));
evalcond[3]=((IkReal(-0.0798110000000000))+(((x81)*(x90)))+(((IkReal(-0.353600000000000))*(x80)))+(((IkReal(1.36000000000000))*(x88)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.520000000000000))*(x83)))+(((IkReal(0.520000000000000))*(x81)))+(((x83)*(x90))));
evalcond[4]=((IkReal(0.260000000000000))+(((IkReal(-1.00000000000000))*(x80)*(x82)))+(((IkReal(0.680000000000000))*(x80)))+(((IkReal(-1.00000000000000))*(x79)*(x84)))+(((IkReal(-1.00000000000000))*(x79)*(x85)))+(((IkReal(-1.00000000000000))*(x81)))+(((IkReal(-1.00000000000000))*(x83)))+(((x80)*(x86))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x231=(cj2)*(cj2);
IkReal x232=(sj2)*(sj2);
IkReal x233=((cj2)*(sj2));
if( IKabs(((gconst0)*((((pz)*(pz))+(((IkReal(-0.00122500000000000))*(x231)))+(((IkReal(-0.448900000000000))*(x232)))+(((IkReal(-0.0469000000000000))*(x233))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((((cj0)*(px)*(pz)))+(((IkReal(0.0234500000000000))*(x231)))+(((IkReal(-0.260000000000000))*(pz)))+(((IkReal(-0.0234500000000000))*(x232)))+(((py)*(pz)*(sj0)))+(((IkReal(0.455600000000000))*(sj2)))+(((IkReal(0.0238000000000000))*(cj2)))+(((IkReal(0.447675000000000))*(x233))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst0)*((((pz)*(pz))+(((IkReal(-0.00122500000000000))*(x231)))+(((IkReal(-0.448900000000000))*(x232)))+(((IkReal(-0.0469000000000000))*(x233)))))), ((gconst0)*(((((cj0)*(px)*(pz)))+(((IkReal(0.0234500000000000))*(x231)))+(((IkReal(-0.260000000000000))*(pz)))+(((IkReal(-0.0234500000000000))*(x232)))+(((py)*(pz)*(sj0)))+(((IkReal(0.455600000000000))*(sj2)))+(((IkReal(0.0238000000000000))*(cj2)))+(((IkReal(0.447675000000000))*(x233)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x234=IKsin(j1);
IkReal x235=IKcos(j1);
IkReal x236=((cj0)*(px));
IkReal x237=((IkReal(0.0350000000000000))*(sj2));
IkReal x238=((py)*(sj0));
IkReal x239=((IkReal(0.670000000000000))*(sj2));
IkReal x240=((IkReal(0.0350000000000000))*(cj2));
IkReal x241=((IkReal(0.670000000000000))*(cj2));
IkReal x242=((IkReal(1.00000000000000))*(x235));
IkReal x243=((pz)*(x234));
IkReal x244=((IkReal(0.670000000000000))*(x235));
IkReal x245=((IkReal(1.36000000000000))*(x235));
evalcond[0]=((((x234)*(x238)))+(((x234)*(x236)))+(((IkReal(-1.00000000000000))*(pz)*(x242)))+(x239)+(x240)+(((IkReal(-0.260000000000000))*(x234))));
evalcond[1]=((IkReal(0.680000000000000))+(((IkReal(-1.00000000000000))*(x243)))+(((IkReal(-1.00000000000000))*(x236)*(x242)))+(((IkReal(-1.00000000000000))*(x237)))+(x241)+(((IkReal(-1.00000000000000))*(x238)*(x242)))+(((IkReal(0.260000000000000))*(x235))));
evalcond[2]=((((IkReal(0.680000000000000))*(x234)))+(((x234)*(x241)))+(((IkReal(-1.00000000000000))*(pz)))+(((x235)*(x239)))+(((IkReal(-1.00000000000000))*(x234)*(x237)))+(((x235)*(x240))));
evalcond[3]=((IkReal(-0.0798110000000000))+(((x238)*(x245)))+(((x236)*(x245)))+(((IkReal(0.520000000000000))*(x236)))+(((IkReal(0.520000000000000))*(x238)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.353600000000000))*(x235)))+(((IkReal(1.36000000000000))*(x243))));
evalcond[4]=((IkReal(0.260000000000000))+(((IkReal(0.680000000000000))*(x235)))+(((IkReal(-1.00000000000000))*(x235)*(x237)))+(((IkReal(-1.00000000000000))*(x234)*(x240)))+(((IkReal(-1.00000000000000))*(x234)*(x239)))+(((IkReal(-1.00000000000000))*(x236)))+(((IkReal(-1.00000000000000))*(x238)))+(((x235)*(x241))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
if( IKabs(py) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(px))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x246=((IkReal(1.00000000000000))*(IKatan2(py, ((IkReal(-1.00000000000000))*(px)))));
if( ((((px)*(px))+((py)*(py)))) < (IkReal)-0.00001 )
    continue;
if( (((IkReal(0.00800000000000000))*(((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30)))) < -1-IKFAST_SINCOS_THRESH || (((IkReal(0.00800000000000000))*(((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x247=IKasin(((IkReal(0.00800000000000000))*(((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))));
j0array[0]=((((IkReal(-1.00000000000000))*(x247)))+(((IkReal(-1.00000000000000))*(x246))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((IkReal(3.14159265358979))+(x247)+(((IkReal(-1.00000000000000))*(x246))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
if( (((IkReal(0.926073762202177))+(((IkReal(0.569898964773662))*(cj0)*(px)))+(((IkReal(-1.09595954764166))*(pp)))+(((IkReal(0.569898964773662))*(py)*(sj0))))) < -1-IKFAST_SINCOS_THRESH || (((IkReal(0.926073762202177))+(((IkReal(0.569898964773662))*(cj0)*(px)))+(((IkReal(-1.09595954764166))*(pp)))+(((IkReal(0.569898964773662))*(py)*(sj0))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x248=IKasin(((IkReal(0.926073762202177))+(((IkReal(0.569898964773662))*(cj0)*(px)))+(((IkReal(-1.09595954764166))*(pp)))+(((IkReal(0.569898964773662))*(py)*(sj0)))));
j2array[0]=((IkReal(-1.62298769238200))+(((IkReal(-1.00000000000000))*(x248))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((IkReal(1.51860496120779))+(x248));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal dummyeval[1];
IkReal gconst0;
IkReal x249=((IkReal(0.670000000000000))*(sj2));
IkReal x250=((cj0)*(px));
IkReal x251=((py)*(sj0));
IkReal x252=((IkReal(0.0350000000000000))*(cj2));
gconst0=IKsign(((((IkReal(-0.00910000000000000))*(cj2)))+(((IkReal(-0.174200000000000))*(sj2)))+(((x249)*(x250)))+(((x249)*(x251)))+(((x251)*(x252)))+(((IkReal(-0.0350000000000000))*(pz)*(sj2)))+(((x250)*(x252)))+(((IkReal(0.670000000000000))*(cj2)*(pz)))+(((IkReal(0.680000000000000))*(pz)))));
IkReal x253=((cj0)*(px));
IkReal x254=((IkReal(3.84615384615385))*(cj2));
IkReal x255=((IkReal(73.6263736263736))*(sj2));
IkReal x256=((py)*(sj0));
dummyeval[0]=((((x253)*(x254)))+(((x253)*(x255)))+(((IkReal(73.6263736263736))*(cj2)*(pz)))+(((IkReal(74.7252747252747))*(pz)))+(((IkReal(-3.84615384615385))*(pz)*(sj2)))+(((x254)*(x256)))+(((x255)*(x256)))+(((IkReal(-1.00000000000000))*(cj2)))+(((IkReal(-19.1428571428571))*(sj2))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst1;
IkReal x257=((py)*(sj0));
IkReal x258=((cj0)*(px));
gconst1=IKsign(((IkReal(-0.0676000000000000))+(((IkReal(-1.00000000000000))*((x258)*(x258))))+(((IkReal(-1.00000000000000))*((x257)*(x257))))+(((IkReal(-1.00000000000000))*((pz)*(pz))))+(((IkReal(-2.00000000000000))*(x257)*(x258)))+(((IkReal(0.520000000000000))*(x257)))+(((IkReal(0.520000000000000))*(x258)))));
IkReal x259=((py)*(sj0));
IkReal x260=((cj0)*(px));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(7.69230769230769))*(x259)))+(((IkReal(-14.7928994082840))*((pz)*(pz))))+(((IkReal(-14.7928994082840))*((x260)*(x260))))+(((IkReal(-29.5857988165680))*(x259)*(x260)))+(((IkReal(7.69230769230769))*(x260)))+(((IkReal(-14.7928994082840))*((x259)*(x259)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x261=((cj0)*(px));
IkReal x262=((IkReal(0.670000000000000))*(sj2));
IkReal x263=((IkReal(0.0350000000000000))*(cj2));
IkReal x264=((py)*(sj0));
IkReal x265=((IkReal(0.670000000000000))*(cj2));
IkReal x266=((IkReal(0.0350000000000000))*(sj2));
IkReal x267=((sj2)*(x264));
if( IKabs(((gconst1)*(((((IkReal(-0.00910000000000000))*(cj2)))+(((IkReal(-0.174200000000000))*(sj2)))+(((x262)*(x264)))+(((x263)*(x264)))+(((IkReal(-0.680000000000000))*(pz)))+(((pz)*(x266)))+(((x261)*(x263)))+(((x261)*(x262)))+(((IkReal(-1.00000000000000))*(pz)*(x265))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((IkReal(0.176800000000000))+(((IkReal(-0.680000000000000))*(x261)))+(((IkReal(-0.680000000000000))*(x264)))+(((x264)*(x266)))+(((IkReal(0.174200000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(x261)*(x265)))+(((x261)*(x266)))+(((IkReal(-1.00000000000000))*(x264)*(x265)))+(((IkReal(-0.00910000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(pz)*(x262)))+(((IkReal(-1.00000000000000))*(pz)*(x263))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst1)*(((((IkReal(-0.00910000000000000))*(cj2)))+(((IkReal(-0.174200000000000))*(sj2)))+(((x262)*(x264)))+(((x263)*(x264)))+(((IkReal(-0.680000000000000))*(pz)))+(((pz)*(x266)))+(((x261)*(x263)))+(((x261)*(x262)))+(((IkReal(-1.00000000000000))*(pz)*(x265)))))), ((gconst1)*(((IkReal(0.176800000000000))+(((IkReal(-0.680000000000000))*(x261)))+(((IkReal(-0.680000000000000))*(x264)))+(((x264)*(x266)))+(((IkReal(0.174200000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(x261)*(x265)))+(((x261)*(x266)))+(((IkReal(-1.00000000000000))*(x264)*(x265)))+(((IkReal(-0.00910000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(pz)*(x262)))+(((IkReal(-1.00000000000000))*(pz)*(x263)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x268=IKsin(j1);
IkReal x269=IKcos(j1);
IkReal x270=((cj0)*(px));
IkReal x271=((IkReal(0.0350000000000000))*(sj2));
IkReal x272=((py)*(sj0));
IkReal x273=((IkReal(0.670000000000000))*(sj2));
IkReal x274=((IkReal(0.0350000000000000))*(cj2));
IkReal x275=((IkReal(0.670000000000000))*(cj2));
IkReal x276=((IkReal(1.00000000000000))*(x269));
IkReal x277=((pz)*(x268));
IkReal x278=((IkReal(0.670000000000000))*(x269));
IkReal x279=((IkReal(1.36000000000000))*(x269));
evalcond[0]=((((IkReal(-1.00000000000000))*(pz)*(x276)))+(x274)+(x273)+(((IkReal(-0.260000000000000))*(x268)))+(((x268)*(x270)))+(((x268)*(x272))));
evalcond[1]=((IkReal(0.680000000000000))+(((IkReal(-1.00000000000000))*(x272)*(x276)))+(((IkReal(-1.00000000000000))*(x277)))+(((IkReal(0.260000000000000))*(x269)))+(x275)+(((IkReal(-1.00000000000000))*(x271)))+(((IkReal(-1.00000000000000))*(x270)*(x276))));
evalcond[2]=((((IkReal(0.680000000000000))*(x268)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x268)*(x271)))+(((x269)*(x274)))+(((x269)*(x273)))+(((x268)*(x275))));
evalcond[3]=((IkReal(-0.0798110000000000))+(((x272)*(x279)))+(((IkReal(-0.353600000000000))*(x269)))+(((x270)*(x279)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.520000000000000))*(x272)))+(((IkReal(0.520000000000000))*(x270)))+(((IkReal(1.36000000000000))*(x277))));
evalcond[4]=((IkReal(0.260000000000000))+(((IkReal(-1.00000000000000))*(x272)))+(((IkReal(-1.00000000000000))*(x270)))+(((IkReal(0.680000000000000))*(x269)))+(((IkReal(-1.00000000000000))*(x269)*(x271)))+(((IkReal(-1.00000000000000))*(x268)*(x273)))+(((IkReal(-1.00000000000000))*(x268)*(x274)))+(((x269)*(x275))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x280=(cj2)*(cj2);
IkReal x281=(sj2)*(sj2);
IkReal x282=((cj2)*(sj2));
if( IKabs(((gconst0)*(((((IkReal(-0.448900000000000))*(x281)))+(((IkReal(-0.0469000000000000))*(x282)))+((pz)*(pz))+(((IkReal(-0.00122500000000000))*(x280))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((((cj0)*(px)*(pz)))+(((IkReal(-0.260000000000000))*(pz)))+(((IkReal(0.447675000000000))*(x282)))+(((py)*(pz)*(sj0)))+(((IkReal(0.455600000000000))*(sj2)))+(((IkReal(0.0238000000000000))*(cj2)))+(((IkReal(0.0234500000000000))*(x280)))+(((IkReal(-0.0234500000000000))*(x281))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst0)*(((((IkReal(-0.448900000000000))*(x281)))+(((IkReal(-0.0469000000000000))*(x282)))+((pz)*(pz))+(((IkReal(-0.00122500000000000))*(x280)))))), ((gconst0)*(((((cj0)*(px)*(pz)))+(((IkReal(-0.260000000000000))*(pz)))+(((IkReal(0.447675000000000))*(x282)))+(((py)*(pz)*(sj0)))+(((IkReal(0.455600000000000))*(sj2)))+(((IkReal(0.0238000000000000))*(cj2)))+(((IkReal(0.0234500000000000))*(x280)))+(((IkReal(-0.0234500000000000))*(x281)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x283=IKsin(j1);
IkReal x284=IKcos(j1);
IkReal x285=((cj0)*(px));
IkReal x286=((IkReal(0.0350000000000000))*(sj2));
IkReal x287=((py)*(sj0));
IkReal x288=((IkReal(0.670000000000000))*(sj2));
IkReal x289=((IkReal(0.0350000000000000))*(cj2));
IkReal x290=((IkReal(0.670000000000000))*(cj2));
IkReal x291=((IkReal(1.00000000000000))*(x284));
IkReal x292=((pz)*(x283));
IkReal x293=((IkReal(0.670000000000000))*(x284));
IkReal x294=((IkReal(1.36000000000000))*(x284));
evalcond[0]=((((IkReal(-1.00000000000000))*(pz)*(x291)))+(((IkReal(-0.260000000000000))*(x283)))+(x289)+(x288)+(((x283)*(x285)))+(((x283)*(x287))));
evalcond[1]=((IkReal(0.680000000000000))+(((IkReal(-1.00000000000000))*(x292)))+(((IkReal(0.260000000000000))*(x284)))+(((IkReal(-1.00000000000000))*(x285)*(x291)))+(x290)+(((IkReal(-1.00000000000000))*(x287)*(x291)))+(((IkReal(-1.00000000000000))*(x286))));
evalcond[2]=((((x284)*(x289)))+(((x284)*(x288)))+(((x283)*(x290)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(0.680000000000000))*(x283)))+(((IkReal(-1.00000000000000))*(x283)*(x286))));
evalcond[3]=((IkReal(-0.0798110000000000))+(((IkReal(-0.353600000000000))*(x284)))+(((IkReal(1.36000000000000))*(x292)))+(((x287)*(x294)))+(((IkReal(-1.00000000000000))*(pp)))+(((x285)*(x294)))+(((IkReal(0.520000000000000))*(x287)))+(((IkReal(0.520000000000000))*(x285))));
evalcond[4]=((IkReal(0.260000000000000))+(((x284)*(x290)))+(((IkReal(-1.00000000000000))*(x287)))+(((IkReal(-1.00000000000000))*(x285)))+(((IkReal(-1.00000000000000))*(x284)*(x286)))+(((IkReal(0.680000000000000))*(x284)))+(((IkReal(-1.00000000000000))*(x283)*(x288)))+(((IkReal(-1.00000000000000))*(x283)*(x289))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x91=((IkReal(1.00000000000000))*(cj0));
IkReal x92=((r11)*(sj0));
IkReal x93=((sj1)*(sj2));
IkReal x94=((r10)*(sj0));
IkReal x95=((cj0)*(r00));
IkReal x96=((cj1)*(cj2));
IkReal x97=((cj0)*(r01));
IkReal x98=((r12)*(sj0));
IkReal x99=((cj0)*(r02));
IkReal x100=((x96)+(((IkReal(-1.00000000000000))*(x93))));
IkReal x101=((x93)+(((IkReal(-1.00000000000000))*(x96))));
IkReal x102=((sj0)*(x101));
IkReal x103=((((IkReal(-1.00000000000000))*(cj2)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(sj2))));
IkReal x104=((cj0)*(x103));
new_r00=((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(r10)*(x91))));
new_r01=((((r01)*(sj0)))+(((IkReal(-1.00000000000000))*(r11)*(x91))));
new_r02=((((IkReal(-1.00000000000000))*(r12)*(x91)))+(((r02)*(sj0))));
new_r10=((((x103)*(x94)))+(((x103)*(x95)))+(((r20)*(x100))));
new_r11=((((x103)*(x92)))+(((x103)*(x97)))+(((r21)*(x100))));
new_r12=((((r22)*(x100)))+(((x103)*(x98)))+(((x103)*(x99))));
new_r20=((((x101)*(x95)))+(((x101)*(x94)))+(((r20)*(x103))));
new_r21=((((x101)*(x92)))+(((x101)*(x97)))+(((r21)*(x103))));
new_r22=((((r22)*(x103)))+(((x101)*(x99)))+(((x101)*(x98))));
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
cj4array[0]=new_r22;
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal dummyeval[1];
IkReal gconst4;
gconst4=IKsign(sj4);
dummyeval[0]=sj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst2;
gconst2=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign(((((cj4)*((new_r12)*(new_r12))))+(((cj4)*((new_r02)*(new_r02))))));
dummyeval[0]=((((cj4)*((new_r12)*(new_r12))))+(((cj4)*((new_r02)*(new_r02)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r20, new_r21);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
evalcond[0]=((new_r20)+(((IkReal(-1.00000000000000))*(IKsin(j5)))));
evalcond[1]=((((IkReal(-1.00000000000000))*(IKcos(j5))))+(new_r21));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst11;
gconst11=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst10;
gconst10=IKsign(((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11)))));
dummyeval[0]=((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x105=((gconst10)*(sj5));
if( IKabs(((new_r02)*(x105))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r12)*(x105))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((new_r02)*(x105)), ((IkReal(-1.00000000000000))*(new_r12)*(x105)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x106=IKcos(j3);
IkReal x107=IKsin(j3);
IkReal x108=((IkReal(1.00000000000000))*(x107));
evalcond[0]=((((new_r02)*(x106)))+(((new_r12)*(x107))));
evalcond[1]=((sj5)+(((new_r01)*(x106)))+(((new_r11)*(x107))));
evalcond[2]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r02)*(x108)))+(((new_r12)*(x106))));
evalcond[3]=((((new_r10)*(x107)))+(((new_r00)*(x106)))+(((IkReal(-1.00000000000000))*(cj5))));
evalcond[4]=((((new_r10)*(x106)))+(((IkReal(-1.00000000000000))*(new_r00)*(x108))));
evalcond[5]=((((IkReal(-1.00000000000000))*(new_r01)*(x108)))+(((new_r11)*(x106))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((gconst11)*(new_r02))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst11)*(new_r12))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst11)*(new_r02)), ((IkReal(-1.00000000000000))*(gconst11)*(new_r12)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x109=IKcos(j3);
IkReal x110=IKsin(j3);
IkReal x111=((IkReal(1.00000000000000))*(x110));
evalcond[0]=((((new_r02)*(x109)))+(((new_r12)*(x110))));
evalcond[1]=((((new_r11)*(x110)))+(sj5)+(((new_r01)*(x109))));
evalcond[2]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r02)*(x111)))+(((new_r12)*(x109))));
evalcond[3]=((((new_r10)*(x110)))+(((new_r00)*(x109)))+(((IkReal(-1.00000000000000))*(cj5))));
evalcond[4]=((((new_r10)*(x109)))+(((IkReal(-1.00000000000000))*(new_r00)*(x111))));
evalcond[5]=((((IkReal(-1.00000000000000))*(new_r01)*(x111)))+(((new_r11)*(x109))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=((IkReal(-1.00000000000000))*(new_r22));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r20)))+IKsqr(((IkReal(-1.00000000000000))*(new_r21)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r20)), ((IkReal(-1.00000000000000))*(new_r21)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
evalcond[0]=((IKsin(j5))+(new_r20));
evalcond[1]=((IKcos(j5))+(new_r21));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst14;
gconst14=IKsign(((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11)))));
dummyeval[0]=((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst15;
gconst15=IKsign(((((IkReal(-1.00000000000000))*((new_r02)*(new_r02))))+(((IkReal(-1.00000000000000))*((new_r12)*(new_r12))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((new_r02)*(new_r02))))+(((IkReal(-1.00000000000000))*((new_r12)*(new_r12)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((gconst15)*(new_r02))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst15)*(new_r12))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst15)*(new_r02)), ((IkReal(-1.00000000000000))*(gconst15)*(new_r12)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x112=IKcos(j3);
IkReal x113=IKsin(j3);
IkReal x114=((IkReal(1.00000000000000))*(x113));
evalcond[0]=((((new_r02)*(x112)))+(((new_r12)*(x113))));
evalcond[1]=((((new_r11)*(x113)))+(sj5)+(((new_r01)*(x112))));
evalcond[2]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r02)*(x114)))+(((new_r12)*(x112))));
evalcond[3]=((((new_r10)*(x113)))+(((new_r00)*(x112)))+(((IkReal(-1.00000000000000))*(cj5))));
evalcond[4]=((((new_r10)*(x112)))+(((IkReal(-1.00000000000000))*(new_r00)*(x114))));
evalcond[5]=((((new_r11)*(x112)))+(((IkReal(-1.00000000000000))*(new_r01)*(x114))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x115=((gconst14)*(sj5));
if( IKabs(((new_r02)*(x115))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r12)*(x115))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((new_r02)*(x115)), ((IkReal(-1.00000000000000))*(new_r12)*(x115)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x116=IKcos(j3);
IkReal x117=IKsin(j3);
IkReal x118=((IkReal(1.00000000000000))*(x117));
evalcond[0]=((((new_r02)*(x116)))+(((new_r12)*(x117))));
evalcond[1]=((((new_r11)*(x117)))+(sj5)+(((new_r01)*(x116))));
evalcond[2]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r02)*(x118)))+(((new_r12)*(x116))));
evalcond[3]=((((new_r10)*(x117)))+(((new_r00)*(x116)))+(((IkReal(-1.00000000000000))*(cj5))));
evalcond[4]=((((new_r10)*(x116)))+(((IkReal(-1.00000000000000))*(new_r00)*(x118))));
evalcond[5]=((((new_r11)*(x116)))+(((IkReal(-1.00000000000000))*(new_r01)*(x118))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[5]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[6]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
if( IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x119=IKatan2(new_r02, new_r12);
j3array[0]=((IkReal(-1.00000000000000))*(x119));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x119))));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(IKsin(j3))))+(((new_r12)*(IKcos(j3)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj3)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj3))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r10)*(sj3)))+(((cj3)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj3)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj3)))))+IKsqr(((((new_r10)*(sj3)))+(((cj3)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj3)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj3)))), ((((new_r10)*(sj3)))+(((cj3)*(new_r00)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x120=IKsin(j5);
IkReal x121=((IkReal(1.00000000000000))*(sj3));
IkReal x122=((IkReal(1.00000000000000))*(IKcos(j5)));
evalcond[0]=((((new_r11)*(sj3)))+(x120)+(((cj3)*(new_r01))));
evalcond[1]=((((new_r10)*(sj3)))+(((IkReal(-1.00000000000000))*(x122)))+(((cj3)*(new_r00))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)*(x121)))+(((cj3)*(new_r10)))+(((IkReal(-1.00000000000000))*(x120))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x121)))+(((IkReal(-1.00000000000000))*(x122)))+(((cj3)*(new_r11))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
IkReal x123=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=x123;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x123;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
if( IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x124=IKatan2(new_r02, new_r12);
j3array[0]=((IkReal(-1.00000000000000))*(x124));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x124))));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(IKsin(j3))))+(((new_r12)*(IKcos(j3)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj3)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj3))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r10)*(sj3)))+(((cj3)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj3)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj3)))))+IKsqr(((((new_r10)*(sj3)))+(((cj3)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj3)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj3)))), ((((new_r10)*(sj3)))+(((cj3)*(new_r00)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x125=IKsin(j5);
IkReal x126=IKcos(j5);
IkReal x127=((IkReal(1.00000000000000))*(sj3));
evalcond[0]=((((new_r11)*(sj3)))+(x125)+(((cj3)*(new_r01))));
evalcond[1]=((((new_r10)*(sj3)))+(((cj3)*(new_r00)))+(((IkReal(-1.00000000000000))*(x126))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)*(x127)))+(x125)+(((cj3)*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x127)))+(x126)+(((cj3)*(new_r11))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x128=((gconst3)*(new_r22)*(sj4));
if( IKabs(((new_r02)*(x128))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r12)*(x128))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((new_r02)*(x128)), ((IkReal(-1.00000000000000))*(new_r12)*(x128)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x129=IKcos(j3);
IkReal x130=IKsin(j3);
IkReal x131=((IkReal(1.00000000000000))*(cj4));
IkReal x132=((IkReal(1.00000000000000))*(sj4));
IkReal x133=((sj4)*(x129));
IkReal x134=((new_r02)*(x130));
IkReal x135=((new_r12)*(x129));
evalcond[0]=((((new_r12)*(x130)))+(((new_r02)*(x129))));
evalcond[1]=((sj4)+(x135)+(((IkReal(-1.00000000000000))*(x134))));
evalcond[2]=((((new_r22)*(sj4)))+(((cj4)*(x135)))+(((IkReal(-1.00000000000000))*(x131)*(x134))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r20)*(x131)))+(((IkReal(-1.00000000000000))*(new_r00)*(x130)*(x132)))+(((new_r10)*(x133))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r21)*(x131)))+(((IkReal(-1.00000000000000))*(new_r01)*(x130)*(x132)))+(((new_r11)*(x133))));
evalcond[5]=((IkReal(1.00000000000000))+(((new_r12)*(x133)))+(((IkReal(-1.00000000000000))*(x132)*(x134)))+(((IkReal(-1.00000000000000))*(new_r22)*(x131))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst5;
gconst5=IKsign(sj4);
dummyeval[0]=sj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x136=((((new_r12)*(sj3)))+(((cj3)*(new_r02))));
IkReal x137=((((IkReal(-1.00000000000000))*(new_r02)*(sj3)))+(((cj3)*(new_r12))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x136;
evalcond[5]=x136;
evalcond[6]=x137;
evalcond[7]=x137;
evalcond[8]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[9]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj3)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj3))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r10)*(sj3)))+(((cj3)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj3)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj3)))))+IKsqr(((((new_r10)*(sj3)))+(((cj3)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj3)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj3)))), ((((new_r10)*(sj3)))+(((cj3)*(new_r00)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x138=IKsin(j5);
IkReal x139=((IkReal(1.00000000000000))*(sj3));
IkReal x140=((IkReal(1.00000000000000))*(IKcos(j5)));
evalcond[0]=((((new_r11)*(sj3)))+(x138)+(((cj3)*(new_r01))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x140)))+(((new_r10)*(sj3)))+(((cj3)*(new_r00))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)*(x139)))+(((cj3)*(new_r10)))+(((IkReal(-1.00000000000000))*(x138))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x140)))+(((IkReal(-1.00000000000000))*(new_r01)*(x139)))+(((cj3)*(new_r11))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x141=((IkReal(1.00000000000000))+(new_r22));
IkReal x142=((cj3)*(new_r12));
IkReal x143=((new_r02)*(sj3));
IkReal x144=((((new_r12)*(sj3)))+(((cj3)*(new_r02))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=x141;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x144;
evalcond[5]=x144;
evalcond[6]=((x142)+(((IkReal(-1.00000000000000))*(x143))));
evalcond[7]=((x143)+(((IkReal(-1.00000000000000))*(x142))));
evalcond[8]=new_r20;
evalcond[9]=new_r21;
evalcond[10]=x141;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj3)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj3))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r10)*(sj3)))+(((cj3)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj3)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj3)))))+IKsqr(((((new_r10)*(sj3)))+(((cj3)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj3)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj3)))), ((((new_r10)*(sj3)))+(((cj3)*(new_r00)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x145=IKsin(j5);
IkReal x146=IKcos(j5);
IkReal x147=((IkReal(1.00000000000000))*(sj3));
evalcond[0]=((((new_r11)*(sj3)))+(x145)+(((cj3)*(new_r01))));
evalcond[1]=((((new_r10)*(sj3)))+(((IkReal(-1.00000000000000))*(x146)))+(((cj3)*(new_r00))));
evalcond[2]=((x145)+(((cj3)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x147))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x147)))+(x146)+(((cj3)*(new_r11))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj3)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj3))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r21)*(((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj3)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj3)))))+IKsqr(((new_r21)*(((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj3)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj3)))), ((new_r21)*(((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x148=IKsin(j5);
IkReal x149=IKcos(j5);
IkReal x150=((IkReal(1.00000000000000))*(sj3));
IkReal x151=((cj3)*(cj4));
IkReal x152=((IkReal(1.00000000000000))*(x149));
IkReal x153=((IkReal(1.00000000000000))*(x148));
evalcond[0]=((((IkReal(-1.00000000000000))*(sj4)*(x153)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj4)*(x152)))+(new_r21));
evalcond[2]=((((new_r11)*(sj3)))+(x148)+(((cj3)*(new_r01))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x152)))+(((new_r10)*(sj3)))+(((cj3)*(new_r00))));
evalcond[4]=((((cj3)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x150)))+(((IkReal(-1.00000000000000))*(cj4)*(x153))));
evalcond[5]=((((cj3)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x150)))+(((IkReal(-1.00000000000000))*(cj4)*(x152))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x153)))+(((new_r20)*(sj4)))+(((new_r10)*(x151)))+(((IkReal(-1.00000000000000))*(cj4)*(new_r00)*(x150))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x152)))+(((new_r11)*(x151)))+(((new_r21)*(sj4)))+(((IkReal(-1.00000000000000))*(cj4)*(new_r01)*(x150))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((new_r20)*(((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r10)*(sj3)))+(((cj3)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((new_r20)*(((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))))+IKsqr(((((new_r10)*(sj3)))+(((cj3)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((new_r20)*(((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))), ((((new_r10)*(sj3)))+(((cj3)*(new_r00)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x154=IKsin(j5);
IkReal x155=IKcos(j5);
IkReal x156=((IkReal(1.00000000000000))*(sj3));
IkReal x157=((cj3)*(cj4));
IkReal x158=((IkReal(1.00000000000000))*(x155));
IkReal x159=((IkReal(1.00000000000000))*(x154));
evalcond[0]=((((IkReal(-1.00000000000000))*(sj4)*(x159)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj4)*(x158)))+(new_r21));
evalcond[2]=((((new_r11)*(sj3)))+(x154)+(((cj3)*(new_r01))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x158)))+(((new_r10)*(sj3)))+(((cj3)*(new_r00))));
evalcond[4]=((((cj3)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x156)))+(((IkReal(-1.00000000000000))*(cj4)*(x159))));
evalcond[5]=((((cj3)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x156)))+(((IkReal(-1.00000000000000))*(cj4)*(x158))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x159)))+(((new_r20)*(sj4)))+(((new_r10)*(x157)))+(((IkReal(-1.00000000000000))*(cj4)*(new_r00)*(x156))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x158)))+(((new_r11)*(x157)))+(((new_r21)*(sj4)))+(((IkReal(-1.00000000000000))*(cj4)*(new_r01)*(x156))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((gconst5)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst5)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j5array[0]=IKatan2(((gconst5)*(new_r20)), ((gconst5)*(new_r21)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x160=IKsin(j5);
IkReal x161=IKcos(j5);
IkReal x162=((IkReal(1.00000000000000))*(sj3));
IkReal x163=((cj3)*(cj4));
IkReal x164=((IkReal(1.00000000000000))*(x161));
IkReal x165=((IkReal(1.00000000000000))*(x160));
evalcond[0]=((((IkReal(-1.00000000000000))*(sj4)*(x165)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj4)*(x164)))+(new_r21));
evalcond[2]=((((new_r11)*(sj3)))+(x160)+(((cj3)*(new_r01))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x164)))+(((new_r10)*(sj3)))+(((cj3)*(new_r00))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r00)*(x162)))+(((IkReal(-1.00000000000000))*(cj4)*(x165)))+(((cj3)*(new_r10))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj4)*(x164)))+(((cj3)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x162))));
evalcond[6]=((((new_r20)*(sj4)))+(((IkReal(-1.00000000000000))*(x165)))+(((new_r10)*(x163)))+(((IkReal(-1.00000000000000))*(cj4)*(new_r00)*(x162))));
evalcond[7]=((((new_r11)*(x163)))+(((IkReal(-1.00000000000000))*(x164)))+(((IkReal(-1.00000000000000))*(cj4)*(new_r01)*(x162)))+(((new_r21)*(sj4))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x166=((gconst2)*(sj4));
if( IKabs(((new_r02)*(x166))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r12)*(x166))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((new_r02)*(x166)), ((IkReal(-1.00000000000000))*(new_r12)*(x166)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x167=IKcos(j3);
IkReal x168=IKsin(j3);
IkReal x169=((IkReal(1.00000000000000))*(cj4));
IkReal x170=((IkReal(1.00000000000000))*(sj4));
IkReal x171=((sj4)*(x167));
IkReal x172=((new_r02)*(x168));
IkReal x173=((new_r12)*(x167));
evalcond[0]=((((new_r12)*(x168)))+(((new_r02)*(x167))));
evalcond[1]=((sj4)+(((IkReal(-1.00000000000000))*(x172)))+(x173));
evalcond[2]=((((cj4)*(x173)))+(((new_r22)*(sj4)))+(((IkReal(-1.00000000000000))*(x169)*(x172))));
evalcond[3]=((((new_r10)*(x171)))+(((IkReal(-1.00000000000000))*(new_r00)*(x168)*(x170)))+(((IkReal(-1.00000000000000))*(new_r20)*(x169))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r21)*(x169)))+(((new_r11)*(x171)))+(((IkReal(-1.00000000000000))*(new_r01)*(x168)*(x170))));
evalcond[5]=((IkReal(1.00000000000000))+(((new_r12)*(x171)))+(((IkReal(-1.00000000000000))*(new_r22)*(x169)))+(((IkReal(-1.00000000000000))*(x170)*(x172))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst5;
gconst5=IKsign(sj4);
dummyeval[0]=sj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x174=((((new_r12)*(sj3)))+(((cj3)*(new_r02))));
IkReal x175=((((IkReal(-1.00000000000000))*(new_r02)*(sj3)))+(((cj3)*(new_r12))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x174;
evalcond[5]=x174;
evalcond[6]=x175;
evalcond[7]=x175;
evalcond[8]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[9]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj3)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj3))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r10)*(sj3)))+(((cj3)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj3)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj3)))))+IKsqr(((((new_r10)*(sj3)))+(((cj3)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj3)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj3)))), ((((new_r10)*(sj3)))+(((cj3)*(new_r00)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x176=IKsin(j5);
IkReal x177=((IkReal(1.00000000000000))*(sj3));
IkReal x178=((IkReal(1.00000000000000))*(IKcos(j5)));
evalcond[0]=((((new_r11)*(sj3)))+(x176)+(((cj3)*(new_r01))));
evalcond[1]=((((new_r10)*(sj3)))+(((IkReal(-1.00000000000000))*(x178)))+(((cj3)*(new_r00))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x176)))+(((cj3)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x177))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x178)))+(((cj3)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x177))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x179=((IkReal(1.00000000000000))+(new_r22));
IkReal x180=((cj3)*(new_r12));
IkReal x181=((new_r02)*(sj3));
IkReal x182=((((new_r12)*(sj3)))+(((cj3)*(new_r02))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=x179;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x182;
evalcond[5]=x182;
evalcond[6]=((((IkReal(-1.00000000000000))*(x181)))+(x180));
evalcond[7]=((((IkReal(-1.00000000000000))*(x180)))+(x181));
evalcond[8]=new_r20;
evalcond[9]=new_r21;
evalcond[10]=x179;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj3)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj3))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r10)*(sj3)))+(((cj3)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj3)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj3)))))+IKsqr(((((new_r10)*(sj3)))+(((cj3)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj3)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj3)))), ((((new_r10)*(sj3)))+(((cj3)*(new_r00)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x183=IKsin(j5);
IkReal x184=IKcos(j5);
IkReal x185=((IkReal(1.00000000000000))*(sj3));
evalcond[0]=((((new_r11)*(sj3)))+(x183)+(((cj3)*(new_r01))));
evalcond[1]=((((new_r10)*(sj3)))+(((IkReal(-1.00000000000000))*(x184)))+(((cj3)*(new_r00))));
evalcond[2]=((x183)+(((cj3)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x185))));
evalcond[3]=((x184)+(((IkReal(-1.00000000000000))*(new_r01)*(x185)))+(((cj3)*(new_r11))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj3)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj3))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r21)*(((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj3)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj3)))))+IKsqr(((new_r21)*(((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj3)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj3)))), ((new_r21)*(((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x186=IKsin(j5);
IkReal x187=IKcos(j5);
IkReal x188=((IkReal(1.00000000000000))*(sj3));
IkReal x189=((cj3)*(cj4));
IkReal x190=((IkReal(1.00000000000000))*(x187));
IkReal x191=((IkReal(1.00000000000000))*(x186));
evalcond[0]=((new_r20)+(((IkReal(-1.00000000000000))*(sj4)*(x191))));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(sj4)*(x190))));
evalcond[2]=((((new_r11)*(sj3)))+(x186)+(((cj3)*(new_r01))));
evalcond[3]=((((new_r10)*(sj3)))+(((IkReal(-1.00000000000000))*(x190)))+(((cj3)*(new_r00))));
evalcond[4]=((((IkReal(-1.00000000000000))*(cj4)*(x191)))+(((cj3)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x188))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj4)*(x190)))+(((IkReal(-1.00000000000000))*(new_r01)*(x188)))+(((cj3)*(new_r11))));
evalcond[6]=((((IkReal(-1.00000000000000))*(cj4)*(new_r00)*(x188)))+(((new_r10)*(x189)))+(((new_r20)*(sj4)))+(((IkReal(-1.00000000000000))*(x191))));
evalcond[7]=((((new_r11)*(x189)))+(((IkReal(-1.00000000000000))*(x190)))+(((new_r21)*(sj4)))+(((IkReal(-1.00000000000000))*(cj4)*(new_r01)*(x188))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((new_r20)*(((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r10)*(sj3)))+(((cj3)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((new_r20)*(((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))))+IKsqr(((((new_r10)*(sj3)))+(((cj3)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((new_r20)*(((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))), ((((new_r10)*(sj3)))+(((cj3)*(new_r00)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x192=IKsin(j5);
IkReal x193=IKcos(j5);
IkReal x194=((IkReal(1.00000000000000))*(sj3));
IkReal x195=((cj3)*(cj4));
IkReal x196=((IkReal(1.00000000000000))*(x193));
IkReal x197=((IkReal(1.00000000000000))*(x192));
evalcond[0]=((new_r20)+(((IkReal(-1.00000000000000))*(sj4)*(x197))));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(sj4)*(x196))));
evalcond[2]=((((new_r11)*(sj3)))+(x192)+(((cj3)*(new_r01))));
evalcond[3]=((((new_r10)*(sj3)))+(((IkReal(-1.00000000000000))*(x196)))+(((cj3)*(new_r00))));
evalcond[4]=((((IkReal(-1.00000000000000))*(cj4)*(x197)))+(((cj3)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x194))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj4)*(x196)))+(((IkReal(-1.00000000000000))*(new_r01)*(x194)))+(((cj3)*(new_r11))));
evalcond[6]=((((new_r10)*(x195)))+(((new_r20)*(sj4)))+(((IkReal(-1.00000000000000))*(x197)))+(((IkReal(-1.00000000000000))*(cj4)*(new_r00)*(x194))));
evalcond[7]=((((IkReal(-1.00000000000000))*(cj4)*(new_r01)*(x194)))+(((new_r11)*(x195)))+(((IkReal(-1.00000000000000))*(x196)))+(((new_r21)*(sj4))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((gconst5)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst5)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j5array[0]=IKatan2(((gconst5)*(new_r20)), ((gconst5)*(new_r21)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x198=IKsin(j5);
IkReal x199=IKcos(j5);
IkReal x200=((IkReal(1.00000000000000))*(sj3));
IkReal x201=((cj3)*(cj4));
IkReal x202=((IkReal(1.00000000000000))*(x199));
IkReal x203=((IkReal(1.00000000000000))*(x198));
evalcond[0]=((new_r20)+(((IkReal(-1.00000000000000))*(sj4)*(x203))));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(sj4)*(x202))));
evalcond[2]=((((new_r11)*(sj3)))+(x198)+(((cj3)*(new_r01))));
evalcond[3]=((((new_r10)*(sj3)))+(((IkReal(-1.00000000000000))*(x202)))+(((cj3)*(new_r00))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r00)*(x200)))+(((IkReal(-1.00000000000000))*(cj4)*(x203)))+(((cj3)*(new_r10))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj4)*(x202)))+(((cj3)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x200))));
evalcond[6]=((((new_r20)*(sj4)))+(((new_r10)*(x201)))+(((IkReal(-1.00000000000000))*(cj4)*(new_r00)*(x200)))+(((IkReal(-1.00000000000000))*(x203))));
evalcond[7]=((((new_r11)*(x201)))+(((IkReal(-1.00000000000000))*(x202)))+(((new_r21)*(sj4)))+(((IkReal(-1.00000000000000))*(cj4)*(new_r01)*(x200))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((gconst4)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst4)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j5array[0]=IKatan2(((gconst4)*(new_r20)), ((gconst4)*(new_r21)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x204=((IkReal(1.00000000000000))*(sj4));
evalcond[0]=((((IkReal(-1.00000000000000))*(x204)*(IKsin(j5))))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x204)*(IKcos(j5))))+(new_r21));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst7;
gconst7=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst6;
gconst6=IKsign(((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11)))));
dummyeval[0]=((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x205=((gconst6)*(sj5));
if( IKabs(((new_r02)*(x205))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r12)*(x205))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((new_r02)*(x205)), ((IkReal(-1.00000000000000))*(new_r12)*(x205)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[12];
IkReal x206=IKcos(j3);
IkReal x207=IKsin(j3);
IkReal x208=((IkReal(1.00000000000000))*(cj5));
IkReal x209=((IkReal(1.00000000000000))*(cj4));
IkReal x210=((IkReal(1.00000000000000))*(sj4));
IkReal x211=((new_r11)*(x206));
IkReal x212=((cj4)*(x206));
IkReal x213=((new_r00)*(x207));
IkReal x214=((new_r12)*(x206));
IkReal x215=((new_r10)*(x206));
IkReal x216=((new_r02)*(x207));
IkReal x217=((IkReal(1.00000000000000))*(new_r01)*(x207));
evalcond[0]=((((new_r02)*(x206)))+(((new_r12)*(x207))));
evalcond[1]=((sj5)+(((new_r11)*(x207)))+(((new_r01)*(x206))));
evalcond[2]=((sj4)+(x214)+(((IkReal(-1.00000000000000))*(x216))));
evalcond[3]=((((new_r10)*(x207)))+(((new_r00)*(x206)))+(((IkReal(-1.00000000000000))*(x208))));
evalcond[4]=((x215)+(((IkReal(-1.00000000000000))*(x213)))+(((IkReal(-1.00000000000000))*(sj5)*(x209))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj4)*(x208)))+(x211)+(((IkReal(-1.00000000000000))*(x217))));
evalcond[6]=((((new_r22)*(sj4)))+(((IkReal(-1.00000000000000))*(x209)*(x216)))+(((new_r12)*(x212))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r20)*(x209)))+(((IkReal(-1.00000000000000))*(x210)*(x213)))+(((sj4)*(x215))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r21)*(x209)))+(((IkReal(-1.00000000000000))*(new_r01)*(x207)*(x210)))+(((sj4)*(x211))));
evalcond[9]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22)*(x209)))+(((IkReal(-1.00000000000000))*(x210)*(x216)))+(((sj4)*(x214))));
evalcond[10]=((((IkReal(-1.00000000000000))*(sj5)))+(((new_r20)*(sj4)))+(((IkReal(-1.00000000000000))*(x209)*(x213)))+(((new_r10)*(x212))));
evalcond[11]=((((cj4)*(x211)))+(((IkReal(-1.00000000000000))*(new_r01)*(x207)*(x209)))+(((IkReal(-1.00000000000000))*(x208)))+(((new_r21)*(sj4))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x218=((gconst7)*(sj4));
if( IKabs(((new_r02)*(x218))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r12)*(x218))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((new_r02)*(x218)), ((IkReal(-1.00000000000000))*(new_r12)*(x218)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[12];
IkReal x219=IKcos(j3);
IkReal x220=IKsin(j3);
IkReal x221=((IkReal(1.00000000000000))*(cj5));
IkReal x222=((IkReal(1.00000000000000))*(cj4));
IkReal x223=((IkReal(1.00000000000000))*(sj4));
IkReal x224=((new_r11)*(x219));
IkReal x225=((cj4)*(x219));
IkReal x226=((new_r00)*(x220));
IkReal x227=((new_r12)*(x219));
IkReal x228=((new_r10)*(x219));
IkReal x229=((new_r02)*(x220));
IkReal x230=((IkReal(1.00000000000000))*(new_r01)*(x220));
evalcond[0]=((((new_r12)*(x220)))+(((new_r02)*(x219))));
evalcond[1]=((sj5)+(((new_r11)*(x220)))+(((new_r01)*(x219))));
evalcond[2]=((sj4)+(x227)+(((IkReal(-1.00000000000000))*(x229))));
evalcond[3]=((((new_r00)*(x219)))+(((new_r10)*(x220)))+(((IkReal(-1.00000000000000))*(x221))));
evalcond[4]=((x228)+(((IkReal(-1.00000000000000))*(sj5)*(x222)))+(((IkReal(-1.00000000000000))*(x226))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj4)*(x221)))+(((IkReal(-1.00000000000000))*(x230)))+(x224));
evalcond[6]=((((IkReal(-1.00000000000000))*(x222)*(x229)))+(((new_r22)*(sj4)))+(((new_r12)*(x225))));
evalcond[7]=((((sj4)*(x228)))+(((IkReal(-1.00000000000000))*(x223)*(x226)))+(((IkReal(-1.00000000000000))*(new_r20)*(x222))));
evalcond[8]=((((sj4)*(x224)))+(((IkReal(-1.00000000000000))*(new_r01)*(x220)*(x223)))+(((IkReal(-1.00000000000000))*(new_r21)*(x222))));
evalcond[9]=((IkReal(1.00000000000000))+(((sj4)*(x227)))+(((IkReal(-1.00000000000000))*(x223)*(x229)))+(((IkReal(-1.00000000000000))*(new_r22)*(x222))));
evalcond[10]=((((IkReal(-1.00000000000000))*(sj5)))+(((new_r20)*(sj4)))+(((IkReal(-1.00000000000000))*(x222)*(x226)))+(((new_r10)*(x225))));
evalcond[11]=((((IkReal(-1.00000000000000))*(new_r01)*(x220)*(x222)))+(((cj4)*(x224)))+(((new_r21)*(sj4)))+(((IkReal(-1.00000000000000))*(x221))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:genericrobot - silia (737a92149f43c412efa58c335db904db)>"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
